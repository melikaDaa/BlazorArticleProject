<nav aria-label="Page navigation example ">
    <ul class="pagination justify-content-center fixed-bottom">
       @foreach (var link in links)
       {
           <li @onclick="@(() => SelectedPageInternal(link))"
               style="Cursor:pointer;"
               class="page-item  @(link.Enabled ? null : "disabled") @(link.Active ? "active" : null)">
               <span class="page-link" href=#>@link.Text</span>
           </li>
       }
       

    </ul>
</nav>
@code {

        [Parameter]public int CurrentPage { get; set; } = 1;
        [Parameter]public int TotalPageQuantity { get; set; }
        [Parameter]public int Radius { get; set; } = 3;
        [Parameter]public EventCallback<int> SelectPage { get; set; }
        List<ListModel> links;
    protected override void OnParametersSet()
    {
        LoadPages();
    }

    private async Task SelectedPageInternal(ListModel link)
    {
        if (link.Page == CurrentPage)
        {
            return;
        }
        if (!link.Enabled)
        {
            return;
        }
        CurrentPage = link.Page;
        await SelectPage.InvokeAsync(link.Page);
    }
    private void LoadPages()
    {
        links = new List<ListModel>();
        var isPerviousPageLinkEnabled = CurrentPage != 1;
        var perviousPage = CurrentPage - 1;
        links.Add(new ListModel(perviousPage, isPerviousPageLinkEnabled, "Previous"));
        for (int i = 1; i <= TotalPageQuantity; i++)
        {
            if (i >= CurrentPage - Radius && i <= CurrentPage + Radius)
            {
                links.Add(new ListModel(i) { Active = CurrentPage == i });
            }
        }
        var isNextPageLinkEnabled = CurrentPage != TotalPageQuantity;
        var nextpage = CurrentPage + 1;
        links.Add(new ListModel(nextpage, isNextPageLinkEnabled, "Next"));
    }

    class ListModel
    {
        public ListModel(int page)
            : this(page, true) { }

        public ListModel(int page, bool enable)
            : this(page, enable, page.ToString()) { }

        public ListModel(int page, bool enable, string text)
        {
            Page = page;
            Enabled = enable;
            Text = text;

        }
        public string Text { get; set; }
        public int Page { get; set; }
        public bool Enabled { get; set; } = true;
        public bool Active { get; set; } = false;

    }
}